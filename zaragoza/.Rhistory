locations = points,                     # Spatial data points
#newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_netatmo.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data_netatmo.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + imd + ndvi, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + imd + ndvi, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
imd_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Imperviousness_Density_normalized_scaled.tif"
ndvi_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NDVI_scaled.tif"
swir2_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_SWIR2_normalized_scaled.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
swir2_raster <- raster(swir2_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
swir2_raster <- resample(swir2_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster, swir2_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi", "swir2") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_netatmo.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data_netatmo.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + imd + ndvi, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + imd + ndvi, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
imd_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Imperviousness_Density_normalized_scaled.tif"
ndvi_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NDVI_scaled.tif"
swir2_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_SWIR2_normalized_scaled.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
swir2_raster <- raster(swir2_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
swir2_raster <- resample(swir2_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster, swir2_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi", "swir2") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_netatmo.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data_netatmo.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + imd + ndvi, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + imd + ndvi, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
imd_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Imperviousness_Density_normalized_scaled.tif"
ndvi_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NDVI_scaled.tif"
swir2_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_SWIR2_normalized_scaled.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
swir2_raster <- raster(swir2_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
swir2_raster <- resample(swir2_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster, swir2_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi", "swir2") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_netatmo.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data_netatmo.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + imd + ndvi, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + imd + ndvi, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
imd_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Imperviousness_Density_normalized_scaled.tif"
ndvi_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NDVI_scaled.tif"
swir2_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_SWIR2_normalized_scaled.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
swir2_raster <- raster(swir2_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
swir2_raster <- resample(swir2_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster, swir2_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi", "swir2") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_netatmo.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
cor(data$temp_diff, data$gli, use = "complete.obs")
cor(data$temp_diff, data$nbai, use = "complete.obs")
cor(data$temp_diff, data$mdt, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
gli = data$gli,
nbai = data$nbai,
mdt = data$mdt,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + gli + nbai + mdt, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + gli + nbai + mdt, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + gli + nbai + mdt, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
gli_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_GLI.tif"
nbai_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NBAI.tif"
mdt_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_MDT05_normalized.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
gli_raster <- raster(gli_path)
nbai_raster <- raster(nbai_path)
mdt_raster <- raster(mdt_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
gli_raster <- resample(gli_raster, template, method = "bilinear")
nbai_raster <- resample(nbai_raster, template, method = "bilinear")
mdt_raster <- resample(mdt_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, gli_raster, nbai_raster, mdt_raster)
names(covariates_stack) <- c("svf", "gli", "nbai", "mdt") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + gli + nbai + mdt,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_SVF+IMD+NDVI_new_variables.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("~/University/uhi/zaragoza/data_netatmo.csv")
# Check the first few rows of the dataset
head(data)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$gli, use = "complete.obs")
cor(data$temp_diff, data$nbai, use = "complete.obs")
cor(data$temp_diff, data$mdt, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
gli = data$gli,
nbai = data$nbai,
mdt = data$mdt,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ svf + gli + nbai + mdt, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ svf + gli + nbai + mdt, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + gli + nbai + mdt, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_Sky_View_Factor_scaled.tif"
gli_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_GLI.tif"
nbai_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_NBAI.tif"
mdt_path <- "~/University/uhi/data/rasters/Zaragoza_ETRS89_MDT05_normalized.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
gli_raster <- raster(gli_path)
nbai_raster <- raster(nbai_path)
mdt_raster <- raster(mdt_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
gli_raster <- resample(gli_raster, template, method = "bilinear")
nbai_raster <- resample(nbai_raster, template, method = "bilinear")
mdt_raster <- resample(mdt_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, gli_raster, nbai_raster, mdt_raster)
names(covariates_stack) <- c("svf", "gli", "nbai", "mdt") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + gli + nbai + mdt,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "~/University/uhi/zaragoza/interpolation_netatmo_new_variables.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
