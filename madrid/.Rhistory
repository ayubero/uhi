model = vgm("Sph")
)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff, data = points),
model = vgm("Sph")
)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
anyNA(data$temp_diff)
anyNA(data$svf)
anyNA(data$imd)
anyNA(data$ndvi)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
#fitted_variogram <- fit.variogram(
#  variogram(temp_diff ~ 1, data = points),
#  model = vgm("Sph")
#)
#print(fitted_variogram)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
)
yes
# Standardize predictors
data$imd <- scale(data$imd)
data$svf <- scale(data$svf)
data$ndvi <- scale(data$ndvi)
# Check the first few rows of the dataset
head(data)
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 5 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
cv_variance <- cv_results$var1.var
if (any(cv_variance < 0)) {
warning("Negative variances detected. Variogram model might be invalid.")
}
View(cv_results)
anyNA(points@data)
duplicated_coords <- duplicated(coordinates(points))
if (any(duplicated_coords)) {
cat("Found duplicated coordinates. Removing duplicates...\n")
points <- points[!duplicated_coords, ]
}
# Standardize predictors
data$imd <- scale(data$imd)
data$svf <- scale(data$svf)
data$ndvi <- scale(data$ndvi)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
print(cv_results)
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
View(points)
# Install packages
install.packages("gstat")
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("data.csv")
# Check the first few rows of the dataset
head(data)
anyNA(data$temp_diff)
anyNA(data$svf)
anyNA(data$imd)
anyNA(data$ndvi)
anyNA(points@data)
duplicated_coords <- duplicated(coordinates(points))
if (any(duplicated_coords)) {
cat("Found duplicated coordinates. Removing duplicates...\n")
points <- points[!duplicated_coords, ]
}
anyNA(points@data)
# Standardize predictors
data$imd <- scale(data$imd)
data$svf <- scale(data$svf)
data$ndvi <- scale(data$ndvi)
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Define the variogram model
variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = variogram_model, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
View(data)
# Load libraries
library(gstat)
library(raster)
library(caret)
library(readr)
# Load the CSV file into a dataframe
data <- read_csv("data.csv")
# Check the first few rows of the dataset
head(data)
anyNA(data$temp_diff)
anyNA(data$svf)
anyNA(data$imd)
anyNA(data$ndvi)
anyNA(points@data)
# Standardize predictors
data$imd <- scale(data$imd)
data$svf <- scale(data$svf)
data$ndvi <- scale(data$ndvi)
duplicated_coordinates <- duplicated(data[, c("lon", "lat")])
if (any(duplicated_coordinates)) {
data <- data[!duplicated_coordinates, ]
}
# Check correlation
cor(data$temp_diff, data$svf, use = "complete.obs")
cor(data$temp_diff, data$imd, use = "complete.obs")
cor(data$temp_diff, data$ndvi, use = "complete.obs")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ 1, # Specify the response variable and covariates
locations = points, # Spatial data points
model = variogram_model, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "rasters/Madrid_ETR89_SVF_scaled_50m.tif"
imd_path <- "rasters/Madrid_ETR89_IMD_normalized_scaled_50m.tif"
ndvi_path <- "rasters/Madrid_ETRS89_NDVI_scaled_50m.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ 1,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
warnings()
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "rasters/interpolation_SVF+IMD+NDVI.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = variogram_model, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
points <- data.frame(
lon = data$lon,
lat = data$lat,
svf = data$svf,
imd = data$imd,
ndvi = data$ndvi,
temp_diff = data$temp_diff
)
# Convert the data frame to a spatial data frame
coordinates(points) <- ~lon + lat
# Ensure the data is in a SpatialPointsDataFrame (this will automatically include the coordinates as spatial information)
proj4string(points) <- CRS("+proj=longlat +datum=WGS84")
# Check the structure of the spatial points data
str(points)
# Define the variogram model
#variogram_model <- vgm(psill = 1, model = "Sph", range = 1000, nugget = 0.1)
fitted_variogram <- fit.variogram(
variogram(temp_diff ~ 1, data = points),
model = vgm("Sph")
)
print(fitted_variogram)
plot(variogram(temp_diff ~ 1, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "rasters/Madrid_ETR89_SVF_scaled_50m.tif"
imd_path <- "rasters/Madrid_ETR89_IMD_normalized_scaled_50m.tif"
ndvi_path <- "rasters/Madrid_ETRS89_NDVI_scaled_50m.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ 1,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
print(fitted_variogram)
plot(variogram(temp_diff ~ fitted_variogram, data = points), fitted_variogram)
# Perform cross-validation to evaluate the model's predictive performance
cv_results <- krige.cv(
formula = temp_diff ~ svf + imd + ndvi, # Specify the response variable and covariates
locations = points, # Spatial data points
model = fitted_variogram, # Variogram model
nfold = 10 # Number of folds for cross-validation
)
print(cv_results)
# Calculate RMSE from cross-validation residuals
residuals <- cv_results$observed - cv_results$var1.pred
rmse <- sqrt(mean(residuals^2))
cat("RMSE:", rmse, "\n")
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "rasters/Madrid_ETR89_SVF_scaled_50m.tif"
imd_path <- "rasters/Madrid_ETR89_IMD_normalized_scaled_50m.tif"
ndvi_path <- "rasters/Madrid_ETRS89_NDVI_scaled_50m.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ fitted_variogram,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "rasters/interpolation_SVF+IMD+NDVI.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
# --- INTERPOLATION ---
# Paths to the .tif files
svf_path <- "rasters/Madrid_ETR89_SVF.tif"
imd_path <- "rasters/Madrid_ETR89_IMD_normalized.tif"
ndvi_path <- "rasters/Madrid_ETRS89_NDVI.tif"
# Load the .tif files as raster layers
svf_raster <- raster(svf_path)
imd_raster <- raster(imd_path)
ndvi_raster <- raster(ndvi_path)
# Ensure all rasters have the same CRS, extent, and resolution
template <- svf_raster # Use one raster as the template
imd_raster <- resample(imd_raster, template, method = "bilinear")
ndvi_raster <- resample(ndvi_raster, template, method = "bilinear")
# Stack the covariate rasters
covariates_stack <- stack(svf_raster, imd_raster, ndvi_raster)
names(covariates_stack) <- c("svf", "imd", "ndvi") # Set layer names
# Convert the raster stack to a SpatialPixelsDataFrame
covariates_spdf <- as(covariates_stack, "SpatialPixelsDataFrame")
# Ensure your spatial points have the same CRS
proj4string(points) <- proj4string(template)
# Perform kriging interpolation
kriging_result <- krige(
formula = temp_diff ~ svf + imd + ndvi,  # Interpolation formula
locations = points,                     # Spatial data points
newdata = covariates_spdf,              # Raster stack as spatial grid
model = fitted_variogram                 # Variogram model
)
# Convert the kriging result back to a raster
raster_output <- raster(kriging_result)
# Save the output as a GeoTIFF file
output_path <- "rasters/interpolation_SVF+IMD+NDVI.tif"
writeRaster(raster_output, filename = output_path, format = "GTiff", overwrite = TRUE)
